{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst refs = {\n  datePickField: document.querySelector('#datetime-picker'),\n  startButton: document.querySelector('[data-start]'),\n   days: document.querySelector('[data-days]'),\n   hours: document.querySelector('[data-hours]'),\n   minutes: document.querySelector('[data-minutes]'),\n   seconds: document.querySelector('[data-seconds]'),\n};\n\nrefs.startButton.disabled = true;\n\nlet userSelectedDate;\nlet intervalId;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate < new Date()) {\n      iziToast.show({\n      title: 'Error',\n      message: \"Please choose a date in the future\",\n      titleColor: '#fff',\n      titleSize: '16px',\n      position: 'topRight',\n      });  \n      refs.startButton.disabled = true;\n    } else {\n      userSelectedDate = selectedDates[0];\n      refs.startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\n\nrefs.startButton.addEventListener('click', () => {\n  intervalId = setInterval(() => {\n    const differenceInTime = userSelectedDate - Date.now();\n    if(differenceInTime > 0) {\n    const time = convertMs(differenceInTime);\n    refs.days.textContent = time.days.toString().padStart(2, 0);\n    refs.hours.textContent = time.hours.toString().padStart(2, 0);\n    refs.minutes.textContent = time.minutes.toString().padStart(2, 0);\n    refs.seconds.textContent = time.seconds.toString().padStart(2, 0);\n  }else {\n    clearInterval(intervalId);\n  }\n    refs.datePickField.disabled = true;\n    refs.startButton.disabled = true;\n}, 1000)\n});\n\nfunction convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n    return { days, hours, minutes, seconds };\n  }\n\n\n  \n"],"names":["refs","userSelectedDate","intervalId","options","selectedDates","iziToast","flatpickr","differenceInTime","time","convertMs","ms","days","hours","minutes","seconds"],"mappings":"2GAKA,MAAMA,EAAO,CACX,cAAe,SAAS,cAAc,kBAAkB,EACxD,YAAa,SAAS,cAAc,cAAc,EACjD,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CACnD,EAEAA,EAAK,YAAY,SAAW,GAE5B,IAAIC,EACAC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAC5BH,EAAmBG,EAAc,CAAC,EAC9BH,EAAmB,IAAI,MACzBI,EAAS,KAAK,CACd,MAAO,QACP,QAAS,qCACT,WAAY,OACZ,UAAW,OACX,SAAU,UAChB,CAAO,EACDL,EAAK,YAAY,SAAW,KAE5BC,EAAmBG,EAAc,CAAC,EAClCJ,EAAK,YAAY,SAAW,GAE/B,CACH,EAEAM,EAAU,mBAAoBH,CAAO,EAGrCH,EAAK,YAAY,iBAAiB,QAAS,IAAM,CAC/CE,EAAa,YAAY,IAAM,CAC7B,MAAMK,EAAmBN,EAAmB,KAAK,IAAG,EACpD,GAAGM,EAAmB,EAAG,CACzB,MAAMC,EAAOC,EAAUF,CAAgB,EACvCP,EAAK,KAAK,YAAcQ,EAAK,KAAK,SAAQ,EAAG,SAAS,EAAG,CAAC,EAC1DR,EAAK,MAAM,YAAcQ,EAAK,MAAM,SAAQ,EAAG,SAAS,EAAG,CAAC,EAC5DR,EAAK,QAAQ,YAAcQ,EAAK,QAAQ,SAAQ,EAAG,SAAS,EAAG,CAAC,EAChER,EAAK,QAAQ,YAAcQ,EAAK,QAAQ,SAAQ,EAAG,SAAS,EAAG,CAAC,CACpE,MACI,cAAcN,CAAU,EAExBF,EAAK,cAAc,SAAW,GAC9BA,EAAK,YAAY,SAAW,EAChC,EAAG,GAAI,CACP,CAAC,EAED,SAASS,EAAUC,EAAI,CAQnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C"}